<?php

namespace App\Listeners\Traits;

use App\SDK\Shopify\Shopify;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

trait ShopifyTrait
{
    /**
     * @param  array<string, array{id: int}>  $redirects
     */
    protected function createRedirect(
        Shopify $app,
        string $tenantId,
        string $path,
        string $appPath,
        array $redirects,
    ): void {
        if (strlen($appPath) > 255) {
            Log::channel('slack')->error(
                'App path length is too long (max: 255)',
                [
                    'tenant' => $tenantId,
                    'path' => $appPath,
                ],
            );

            return;
        }

        if (isset($redirects[$path])) {
            $redirect = $redirects[$path];

            // update
            $app->updateRedirect($redirect['id'], $path, $appPath);

            return;
        }

        // create
        $app->createRedirect($path, $appPath);
    }

    protected function injectThemeTemplate(
        Shopify $app,
        string $tenantId,
        string $myshopifyDomain,
        ?int $themeId = null,
    ): void {
        if (!$themeId) {
            $theme = $app->getMainTheme();

            if (!$theme) {
                Log::channel('slack')->debug(
                    '[Shopify] Unexpected error while getting main theme',
                    [
                        'env' => app()->environment(),
                        'shop' => $myshopifyDomain,
                        'tenant' => $tenantId,
                    ],
                );

                return;
            }

            $themeId = $theme['id'];
        }

        $asset = $app->getThemeLiquidAsset($themeId);

        if (!$asset) {
            Log::channel('slack')->debug(
                '[Shopify] Unexpected error while getting main theme liquid asset',
                [
                    'env' => app()->environment(),
                    'shop' => $myshopifyDomain,
                    'tenant' => $tenantId,
                    'theme_id' => $themeId,
                    'theme_name' => $theme['name'] ?? '',
                ],
            );

            return;
        }

        $value = $asset['value'];

        $value = $this->injectMainSnippet($value);

        $value = $this->wrapMetaTags($value);

        if ($value === $asset['value']) {
            return;
        }

        // backup
        Storage::drive('nfs')->put(
            sprintf('shopify-theme-%s-%d.liquid', $myshopifyDomain, now()->timestamp),
            $asset['value'],
        );

        $app->updateThemeLiquidAsset($themeId, $value);
    }

    public function injectMainSnippet(string $value): string
    {
        // ensure theme does not already have the head top
        if (Str::contains($value, '{{ storipress_head_injection }}')) {
            return $value;
        }

        $replacement = <<<'EOF'
<head>

    {%- if storipress_head_injection -%}{{ storipress_head_injection }}{%- endif -%}

EOF;

        return Str::replaceFirst('<head>', $replacement, $value);
    }

    public function wrapMetaTags(string $value): string
    {
        if (Str::contains($value, '[storipress-meta-tags]')) {
            return $value;
        }

        $replacement = <<<'EOF'
{% comment %} [storipress-meta-tags] Auto-generated by Storipress to prevent duplicated meta tags. {% endcomment %}
    {%- if storipress_head_injection == blank -%}
      {% render 'meta-tags' %}
    {%- endif -%}
EOF;

        return Str::replaceFirst('{% render \'meta-tags\' %}', $replacement, $value);
    }
}
